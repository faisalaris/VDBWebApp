@using Blazored.LocalStorage
@using Models


@* Shared/ProductCard.razor *@
<div class="product-card">
    @*@<img src="images/VDBDefault.jpg" alt="@genset.Gname" class="product-image" />*@
    @if (!string.IsNullOrEmpty(genset.Thumbnail))
    {
        <img src="@genset.Thumbnail" alt="@genset.Gname" class="product-image" />
    }
    @*else if (!string.IsNullOrEmpty(genset.Gimage))
    {
        <img src="@ConvertHexToBase64(genset.Gimage, "image/png"))" alt="@genset.Gname" class="product-image" />

        Console.WriteLine(ConvertHexToBase64(genset.Gimage, "image/png"));}*@
    
    else
    {
        <img src="images/VDBDefault.jpg" alt="@genset.Gname" class="product-image" />
    }
    <h4 class="product-title">@genset.Gname</h4>
    @if (genset.Isactive?.ToLower() == "true")
    {
        <p class="text-success">Active</p>
    }
    else
    {
        <p class="text-danger">Inactive</p>
    }

    <button class="btn btn-primary product-detail-button" @onclick="ShowGensetDetail">Edit</button>
</div>

@code {
    [Parameter]
    public Genset genset { get; set; }

    [Parameter]
    public EventCallback<Genset> OnDetailClicked { get; set; }

    [Inject]
    public ILocalStorageService LocalStorage { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public static string CleanHex(string hex)
    {
        if (string.IsNullOrWhiteSpace(hex))
            return string.Empty;

        if (hex.StartsWith("0x", StringComparison.OrdinalIgnoreCase))
            hex = hex[2..];

        // Hilangkan karakter non-hex
        hex = new string(hex.Where(c => "0123456789abcdefABCDEF".Contains(c)).ToArray());

        // Jika panjang ganjil, tambahkan 0 di depan agar genap
        if (hex.Length % 2 != 0)
            hex = "0" + hex;

        return hex;
    }
    private async Task ShowGensetDetail()
    {
        await OnDetailClicked.InvokeAsync(genset);

    }
    private string GetImageSource(string base64Image, string imageType)
    {
        if (string.IsNullOrEmpty(base64Image))
            return "images/VDBDefault.jpg";

        return $"data:{imageType};base64,{base64Image}";
    }

    public static string ConvertHexToBase64(string hexString, string mime = "image/png")
    {
        hexString = CleanHex(hexString);

        byte[] bytes = Enumerable.Range(0, hexString.Length)
            .Where(x => x % 2 == 0)
            .Select(x => Convert.ToByte(hexString.Substring(x, 2), 16))
            .ToArray();

        string base64 = Convert.ToBase64String(bytes);
        return $"data:{mime};base64,{base64}";
    }

   
    

}