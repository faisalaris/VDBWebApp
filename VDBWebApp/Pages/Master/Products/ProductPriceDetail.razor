@page "/productprice"

@using System.Text.Json
@using Blazored.LocalStorage
@using Radzen
@using Radzen.Blazor
@using Models
@using System.ComponentModel.DataAnnotations

@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage // Jika Anda menggunakan Blazored.LocalStorage
@inject IJSRuntime JSRuntime // Jika perlu untuk JSInterop
@inject Services.ProductServices ProductService

<WarningModal @ref="warningModal" />
<ActionModal @ref="SaveConfirmationModal" />

@if (product != null)
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-4">
                @if (!string.IsNullOrEmpty(product.thumbnail))
                {
                    <img src="@product.thumbnail" alt="@product.item_name" class="img-fluid rounded mb-3" />
                }
                else
                {
                    <img src="/images/VDBDefault.jpg" alt="@product.item_name" class="img-fluid rounded mb-3" />
                }
            </div>
            <div class="col-md-8">
                    <div class="mb-3">
                        <label for="item_code" class="form-label">SKU</label>
                        <InputText id="item_code" class="form-control" @bind-Value="product.item_code" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="item_name" class="form-label">Product Name</label>
                        <InputText id="item_name" class="form-control" @bind-Value="product.item_name" readonly />
                    </div>
                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="item_name" class="form-label">Price</label>
                            <InputText id="item_name" class="form-control" @bind-Value="product.item_price" readonly />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="item_name" class="form-label">MSRP</label>
                            <InputText id="item_name" class="form-control" @bind-Value="product.msrp" readonly />
                        </div>
                    </div>
                </div>
                <EditForm Model="@categoryPrices" OnValidSubmit="@ShowSaveConfirmation">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (categoryPrices != null)
                    {
                        @foreach (var price in categoryPrices)
                        {
                                <div class="mb-3" key="@price.cat_code">
                                    <label for="@("item_price_" + price.cat_code)" class="form-label">@price.cat_name</label>
                                    <InputNumber id="@($"item_price_{price.cat_code}")"
                                                 class="form-control"
                                                 @bind-Value="price.item_price_number"
                                                 TValue="int?" />
                                </div>


                        }
                        
                    }
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="GoBack">Back</button>
                </EditForm>
            </div>
        </div>
    </div>
}
else if (errorMessage != null)
{
    <p class="alert alert-danger">@errorMessage</p>
}
else
{
    <p>Loading Product Details...</p>
}

@if (isLoading)
{
    <ProgressCircle LoadingImageUrl="images/logoVDB.png" />
}

@code {
    private Product? product;
    private List<CategoryPrice>? categoryPrices;
    private ActionModal? SaveConfirmationModal;
    private WarningModal warningModal;
    private bool isLoading = false;
    private string? errorMessage;
    int numericPrice; // Variabel untuk menyimpan nilai numerik sementara

    string msrp = "MSRP ";

    protected override async Task OnInitializedAsync()
    {
        var itemId = await LocalStorage.GetItemAsync<string>("selectedProductId");
        var Data = await ProductService.GetPriceProduct(itemId ?? "");
        var DataPrd = await ProductService.GetProduct(itemId ?? "");


        if (!string.IsNullOrEmpty(DataPrd))
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            product = JsonSerializer.Deserialize<List<Product>>(DataPrd, options)?.FirstOrDefault();
            product.item_id = itemId;

            if (!string.IsNullOrEmpty(Data))
            {
                categoryPrices = JsonSerializer.Deserialize<List<CategoryPrice>>(Data, options);

            }
            else
            {
                errorMessage = "Product not found.";
            }
        }
    }

    private async Task SaveProduct()
    {
        
        StateHasChanged();

        isLoading = true;
        await Task.Delay(1000);
        var itemId = await LocalStorage.GetItemAsync<string>("selectedProductId");

        foreach (var cat in categoryPrices)
        {   
            var Data = await ProductService.SavePriceProduct(itemId, cat.cat_code, cat.item_price);
        }

        await Task.Delay(1000);
        isLoading = false;

        SaveConfirmationModal?.Show("Data saved successfully.", "bi bi-check-circle", 0, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
    }


    private void ShowSaveConfirmation()
    {
        SaveConfirmationModal?.Show("Do you want to save the changes?", "oi oi-warning", 2, EventCallback.Factory.Create(this, SaveProduct), "Yes", true, "No");
    }

    private void SuccessConfirmation()
    {
        Navigation.NavigateTo("/productsprice");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/productsprice"); // Arahkan kembali ke halaman produk
    }

    public class CategoryPrice
    {
        public string? cat_code { get; set; } = string.Empty;
        public string? cat_name { get; set; } = string.Empty;
        public string? item_price { get; set; } = string.Empty;
        public int? item_price_number
        {
            get => int.TryParse(item_price, out var val) ? val : null;
            set => item_price = value?.ToString() ?? "";
        }
    }

}

