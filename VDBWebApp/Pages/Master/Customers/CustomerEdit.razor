@page "/customer/edit"

@using System.Text.Json
@using Blazored.LocalStorage
@using Radzen
@using Radzen.Blazor
@using Models
@using System.Globalization;


@inject ILocalStorageService LocalStorage // Jika Anda menggunakan Blazored.LocalStorage
@inject IJSRuntime JSRuntime // Jika perlu untuk JSInterop
@inject Services.CustomerServices CustomerService
@inject Services.GensetServices GensetService
@inject NavigationManager Navigation

<div class="container">
    <h3>Edit Customer</h3>
<!-- BAGIAN ATAS: Form Edit Customer -->
    <EditForm Model="@customeredit" OnValidSubmit="ShowSaveConfirmation">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="PersonName" class="form-label">Nama:</label>
            <InputText @bind-Value="customeredit.PersonName" class="form-control" />

            <label for="Email" class="form-label">Email:</label>
            <InputText @bind-Value="customeredit.Email" class="form-control" />

        <label for="PersonCategory" class="form-label">Person Category:</label>
            <InputSelect id="PersonCategory" class="form-select" @bind-Value="customeredit.PersonCategory">
                <option value="">Select Category</option>
                <option value="WS">Whole Sale</option>
                <option value="DSM">Drop Ship - Market Place</option>
                <option value="DSD">Drop Ship - Direct</option>
            </InputSelect>
            <ValidationMessage For="@(() => customeredit.PersonCategory)" />

            <label for="CustCategoryCode" class="form-label">Customer Category:</label>
            <select id="CustCategoryCode" class="form-select" @bind="customeredit.CustCategoryCode">
                <option value="">Select Category</option>
                @foreach (var category in custCategories)
                {
                    <option value="@category.gcode">@category.gcode - @category.gname</option>
                }
            </select>

            <label for="PaymentNoteCode" class="form-label">Payment Note:</label>
            <select id="PaymentNoteCode" class="form-select" @bind="customeredit.PaymentNoteCode">
                <option value="">Select Category</option>
                @foreach (var category in payCategories)
                {
                    <option value="@category.gcode">@category.gcode - @category.gname</option>
                }
            </select>

            @if (customeredit.PersonCategory =="WS")
            {
                <label for="credit" class="form-label">Credit Limit:</label>
                <InputNumber id="credit" class="form-control" @bind-Value="credit" />
            }
            <label for="ForeignCode" class="form-label">ForeignCode:</label>
            <InputText @bind-Value="customeredit.ForeignCode" class="form-control" />
            
    </div>

    <button class="btn btn-success" type="submit">Save Customer</button>
</EditForm>

<hr />

<!-- BAGIAN TENGAH: Store Grid -->
<h4>Stores</h4>
<button class="btn btn-primary mb-2" @onclick="AddStore">Add Store</button>
<table class="table table-striped table-bordered table-hover person-table">
    <thead class="table-header">
        <tr>
            <th>Store Name</th>
            <th>Phone</th>
            <th>Street</th>
            <th>Credit Limit</th>
            <th>Is Active?</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (stores != null && stores.Any())
        {
            @foreach (var store in stores)
            {
                <tr>
                    <td>@store.StoreName</td>
                    <td>@store.StorePhone</td>
                    <td>@store.AddressStreet</td>
                    <td>@store.CreditLimit</td>
                    <td>@(
                        store.IsActive ? "Yes" : "No"
                        )</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary edit-button" @onclick="() => EditStore(store)" title="Edit">
                            <img src="images/material/edit.png" alt="Edit" class="edit-icon" />
                        </button>
                    </td>
                </tr>
            }

        }
        else
        {
            <tr>
                <td colspan="7" class="text-center">Data tidak tersedia</td>
        </tr>
        }
    </tbody>
</table>
<button class="btn btn-success" @onclick="SaveStores">Save Stores</button>

<hr />

<!-- BAGIAN BAWAH: User Grid -->
<h4>Users</h4>
<button class="btn btn-primary mb-2" @onclick="AddUser">Add User</button>
<table class="table table-striped table-bordered table-hover person-table">
    <thead class="table-header">
        <tr>
            <th>User ID</th>
            <th>Password</th>
            <th>Start Date</th>
            <th>Expires Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if(users != null && users.Any())
        {
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.UserId</td>
                    <td>@user.Password</td>
                    <td>@user.StartDate.ToShortDateString()</td>
                    <td>@user.ExpiresDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary edit-button" @onclick="() => EditUser(user)" title="Edit">
                            <img src="images/material/edit.png" alt="Edit" class="edit-icon" />
                        </button>
                    </td>
                </tr>
            }
        }
        else
        {
        <tr>
            <td colspan="7" class="text-center">Data tidak tersedia</td>
        </tr>
        }
    </tbody>
</table>
<button class="btn btn-success" @onclick="SaveUsers">Save Users</button>

<hr />

<!-- Tombol Back -->
<button class="btn btn-secondary" @onclick="GoBack">Back</button>
</div>

<ActionModal @ref="SaveConfirmationModal" />
<WarningModal @ref="warningModal" />

@if (isLoading)
{
    <ProgressCircle LoadingImageUrl="images/logoVDB.png" />
}
@code {

    private List<Category> custCategories = new List<Category>();
    private List<Category> payCategories = new List<Category>();
    private CustomerModel customerModel = new();
    private List<StoreModel> stores = new();
    private List<UserModel> users = new();

    private CustomerSet customeredit = new();
    private ActionModal? SaveConfirmationModal;
    private WarningModal warningModal;
    private bool isLoading = false;
    string personid = "";

    int credit = 0;

    protected override async Task OnInitializedAsync()
    {
        personid = await LocalStorage.GetItemAsync<string>("customerid");
        var data = await CustomerService.GetCustomersdetail(personid);
        var datacat = await GensetService.GetListCustomerCategory();
        var datanote = await GensetService.GetListPaymentCategory();
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

        if (!string.IsNullOrEmpty(data))
        {
            customeredit = JsonSerializer.Deserialize<List<CustomerSet>>(data, options)?.FirstOrDefault();
            credit = int.TryParse(customeredit.CreditLimit?.Replace(",", ""), out var result) ? result : 0;
        }

        if (!string.IsNullOrEmpty(datacat))
        {
            custCategories = JsonSerializer.Deserialize<List<Category>>(datacat, options);
        }

        if (!string.IsNullOrEmpty(datanote))
        {
            payCategories = JsonSerializer.Deserialize<List<Category>>(datanote, options);
        }
    }

    private async Task SaveCustomer()
    {
        isLoading = true;
        await Task.Delay(1000);

        customeredit.CreditLimit = credit.ToString();
        customeredit.PersonId = personid;

        var data = await CustomerService.SetCustomersdetail(customeredit);

        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(customeredit)); 

        await Task.Delay(500);
        isLoading = false;
        SaveConfirmationModal?.Show("Data berhasil di simpan", "bi bi-check-circle", 0, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
    }

    private void ShowSaveConfirmation()
    {
        SaveConfirmationModal?.Show("Apakah Anda yakin ingin Menyimpan?", "oi oi-warning", 2, EventCallback.Factory.Create(this, SaveCustomer), "Save", true, "Cancel");
    }

    private void SuccessConfirmation()
    {
        Navigation.NavigateTo("/customer/edit");
    }

    private void SaveStores()
    { /* Simpan data stores */ }

    private void SaveUsers()
    { /* Simpan data users */ }

    private void GoBack()
    { Navigation.NavigateTo($"/customers"); }

    private void AddStore()
    { /* Tambahkan store baru */ }

    private void EditStore(StoreModel store)
    { /* Logika edit store */ }

    private void AddUser()
    { /* Tambahkan user baru */ }

    private void EditUser(UserModel user)
    { /* Logika edit user */ }

    public class CustomerModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string PersonCategory { get; set; }
        public string CustomerCategory { get; set; }
        public string PaymentNote { get; set; }
        public decimal CreditLimit { get; set; }
    }

    public class StoreModel
    {
        public string StoreName { get; set; }
        public string StorePhone { get; set; }
        public string AddressStreet { get; set; }
        public decimal CreditLimit { get; set; }
        public bool IsActive { get; set; }
    }

    public class UserModel
    {
        public string UserId { get; set; }
        public string Password { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime ExpiresDate { get; set; }
    }
}
