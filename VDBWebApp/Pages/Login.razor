@page "/"
@layout LoginLayout

@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using System.Text.Json
@using Models
@using Microsoft.AspNetCore.Components

@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject Services.LoginServices LoginService

<WarningModal @ref="warningModal" />

@if (isLoading)
{
    <ProgressCircle LoadingImageUrl="images/logoVDB.png" />
}
<div class="logo-container">
    <img src="images/logoVDB.png" alt="Logo Aplikasi" />
</div>

<div class="login-container">
    <h1>Login</h1>

    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">Username:</label>
            <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
            <ValidationMessage For="@(() => loginModel.Username)" />
        </div>

        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@isLoading">Login</button>

   
    </EditForm>
</div>



@code {
    private LoginModel loginModel = new LoginModel();
    private string? deviceId;
    private string? appCode;
    private WarningModal warningModal;
    private List<Dictionary<string, string>> userData = new();
    private bool isLoading = false;
    string user = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        deviceId = await JSRuntime.InvokeAsync<string>("getDeviceId");
        // Anda bisa mengirim deviceId ini ke server saat login
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        var login = await LoginService.GetValidateUserAsync("VDB", deviceId, loginModel.Username, loginModel.Password);
        // Logika otentikasi Anda di sini

        if (!string.IsNullOrEmpty(login))
        {
            userData = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(login, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();
            if (userData.Count > 0 && userData[0].ContainsKey("username"))
            {
                string username = userData[0]["username"];
                if (string.IsNullOrEmpty(username))
                {
                    warningModal.Show("Login gagal! Periksa kembali username dan password.", "bi bi-exclamation-triangle", 1);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "user", login);
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userid", loginModel.Username);
                    Console.WriteLine(userData[0]["personid"]);

                    await Task.Delay(2000); // Tunda sebelum pindah halaman
                    Navigation.NavigateTo("/home", forceLoad: true);
                    isLoading = false;
                    warningModal.Show("Login sukses! Selamat datang.", "bi bi-check-circle", 0);
                }
            }
            else
            {
                warningModal.Show("Login gagal! Periksa kembali username dan password.", "bi bi-exclamation-triangle", 1);
                
            }
        }
        else
        {
            warningModal.Show("Login gagal! Periksa kembali username dan password.", "bi bi-exclamation-triangle", 1);
            
        }

        isLoading = false;
        //Console.WriteLine($"Attempting login with Username: {loginModel.Username}, Password: {loginModel.Password}");
        //Console.WriteLine(login);

        // Setelah otentikasi berhasil, arahkan pengguna
        // NavigationManager.NavigateTo("/");
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string? Password { get; set; }
    }
}