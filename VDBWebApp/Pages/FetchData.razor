@page "/fetchdata"


@using System.ComponentModel.DataAnnotations

@inject IJSRuntime JS

<EditForm Model="@formModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div id="dropdownWrapper" @ref="wrapperRef">
        <input type="text" class="form-control"
               @bind="searchTerm"
               @oninput="FilterCategories"
               @onclick="() => showDropdown = true"
               placeholder="Cari kategori..." />

        @if (showDropdown && filteredCategories.Any())
        {
            <ul class="list-group position-absolute z-3" style="width: 300px; max-height: 200px; overflow-y: auto;">
                @foreach (var cat in filteredCategories)
                {
                    <li class="list-group-item list-group-item-action"
                        @onclick="@(() => SelectCategory(cat))">
                        @($"{cat.CatCode} - {cat.CatName}")
                    </li>
                }
            </ul>
        }

        <ValidationMessage For="@(() => formModel.CategoryCode)" />
    </div>

    <button type="submit" class="btn btn-primary">Simpan</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-success mt-3">@message</div>
}

@code {
    public class Category
    {
        public string CatCode { get; set; }
        public string CatName { get; set; }
    }

    public class ItemFormModel
    {
        [Required(ErrorMessage = "Kategori harus dipilih.")]
        public string CategoryCode { get; set; }
    }

    private ItemFormModel formModel = new();
    private List<Category> categories = new()
    {
        new Category { CatCode = "EL", CatName = "Elektronik" },
        new Category { CatCode = "PK", CatName = "Pakaian" },
        new Category { CatCode = "MK", CatName = "Makanan" },
        new Category { CatCode = "BK", CatName = "Buku" },
        new Category { CatCode = "AT", CatName = "Alat Tulis" }
    };

    private List<Category> filteredCategories = new();
    private string searchTerm = string.Empty;
    private bool showDropdown = false;
    private string message;

    protected override void OnInitialized()
    {
        // Set nilai default "BK"
        formModel.CategoryCode = "BK";

        var selected = categories.FirstOrDefault(c => c.CatCode == formModel.CategoryCode);
        if (selected != null)
        {
            searchTerm = $"{selected.CatCode} - {selected.CatName}";
        }
    }

    private void FilterCategories(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        showDropdown = true;

        filteredCategories = categories
            .Where(c =>
                c.CatCode.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                c.CatName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void SelectCategory(Category category)
    {
        formModel.CategoryCode = category.CatCode;
        searchTerm = $"{category.CatCode} - {category.CatName}";
        filteredCategories.Clear();
        showDropdown = false;
    }

    private void HandleValidSubmit()
    {
        message = $"Kategori yang dipilih: {formModel.CategoryCode}";
    }
    private ElementReference wrapperRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("registerClickOutside", "dropdownWrapper",
                DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void HideDropdown()
    {
        showDropdown = false;
        StateHasChanged();
    }
}