@page "/neworderdetail"


@using System.Text.Json
@using Blazored.LocalStorage
@using Radzen
@using Radzen.Blazor
@using Models
@using System.Globalization;
@using VDBWebApp.Pages.Transaction.Order.Order_Component


@inject ILocalStorageService LocalStorage // Jika Anda menggunakan Blazored.LocalStorage
@inject IJSRuntime JSRuntime // Jika perlu untuk JSInterop
@inject Services.OrderServices OrderService
@inject Services.CustomerServices CustomerService
@inject Services.GensetServices GensetService
@inject Services.UserServices UserService
@inject NavigationManager Navigation

<div class="container">
    <p class="text-muted mb-4">Customer Name: <strong>@customer.PersonName</strong></p>
    <p class="text-muted mb-4">Order ID: <strong>@orderid</strong></p>
    <p class="text-muted mb-4">Payment Note: <strong>@customer.PaymentNote</strong></p>
    <hr />
    <h3>Order List</h3>
    <div class="d-flex justify-content-end mb-2 mt-2" style="gap: 10px;">
        <button class="btn btn-primary" @onclick="OnSearchClik">Add Product</button>
    </div>
    <!-- Display selected products -->
    <div class="product-order-grid">
        @if (orderListCustomers != null && orderListCustomers.Any())
        {
            
                <VDBWebApp.Pages.Transaction.Order.Order_Component.Product_order_grid 
                productorders="@orderListCustomers" 
                OnEditClicked ="HandleClicked"
                OnDeleteClicked="HandleConfirmationDelete"
                /> 

                @*
                <VDBWebApp.Pages.Transaction.Order.Order_Component.Product_order_card_admin 
                orderCustomer="@item"
                OnRemoveCartSelected="HandleRemoveItemCart" 
                OnIncreaseQtyItem = "HandleIncreaseQtyItem"
                OnDecreaseQtyItem= "HandleDecreaseQtyItem"/>*@
            
        }
        else if (loading)
        {
            <p class="loading-text">Loading data...</p>
        }
        else
        {
            <VDBWebApp.Pages.Transaction.Order.Order_Component.Product_order_grid 
                productorders="@orderListCustomers" />
        }
    </div>

    <!-- Button to open modal for selecting products -->
    <div class="d-flex mb-2" style="gap: 10px;">
        <button class="btn btn-success" @onclick="() => ShowSaveConfirmation(EventCallback.Factory.Create(this, OnChekOutClick),msgCheckout)">CheckOut</button>
        @if (usertype != "ADMIN")
        {
            <button class="btn btn-outline-warning" @onclick="() => ShowSaveConfirmation(EventCallback.Factory.Create(this, GetItemFromCart),msgCart)">Get Items from Cart</button>
        }
    </div>
    
    

    <hr />
    @if (customer.PersonCategory == "DSM" || customer.PersonCategory == "DSD")
    {
        <div class="order-summary p-3 border rounded">
            <h4 class="text-center">Order Summary</h4>
            <p class="text-center order-status @GetOrderStatusClass(Status) mb-4 ">Status: <strong>@Status</strong></p>

            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label">Total Amount</label>
                    <input type="text" class="form-control" readonly @bind="orderSummary.SubTotal" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Total Quantity</label>
                    <input type="text" class="form-control"  readonly @bind="orderSummary.TotalQty" />
                </div>
                @if (usertype == "ADMIN")
                {
                    <div class="col-md-6">
                        <label class="form-label">Discount</label>
                        <input type="number" class="form-control" @bind="orderSummary.DiscDecimal" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Delivery Cost</label>
                    <input type="number" class="form-control" @bind="orderSummary.DeliveryCostDecimal" />
                </div>
                }
                <div class="col-12">
                    <label class="form-label">Remark</label>
                    <InputTextArea class="form-control" @bind-Value="orderSummary.Remark" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Sender Store Name</label>
                    <div class="input-group mb-1">
                        <input type="text" class="form-control" readonly @bind="selectedStore.StoreName" />

                        <button class="btn btn-outline-secondary" @onclick="OpenStoreLookupModal" type="button" title="Find Store">
                            <img src="images/material/search.png" alt="Lookup" style="width: 16px; height: 16px;" />
                        </button>
                    </div>
                    <input type="text" class="form-control mb-1" readonly @bind="selectedStore.StreetAddress" />
                    <input type="text" class="form-control mb-1" readonly @bind="selectedStore.PhoneNo" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Resi No</label>
                    <input type="text" class="form-control" @bind="orderSummary.DeliveryReceiptNo" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Recipient Name</label>
                    <input type="text" class="form-control" @bind="orderSummary.RecName" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Recipient Phone No</label>
                    <input type="text" class="form-control" @bind="orderSummary.RecPhoneNo" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Recipient Address</label>
                    <div class="input-group mb-1">
                        <input type="text" class="form-control" readonly @bind="orderSummary.RecStreetAddress" />

                        <button class="btn btn-outline-secondary" @onclick="OpenAddressLookupModal" type="button" title="Find Address">
                            <img src="images/material/search.png" alt="Lookup" style="width: 16px; height: 16px;" />
                        </button>
                    </div>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Courier</label>
                    <div class="input-group mb-1">
                        <input type="text" class="form-control" readonly @bind="selectedGenset.Gname" />

                        <button class="btn btn-outline-secondary" @onclick="OpenCourierLookupModal" type="button" title="Find Store">
                            <img src="images/material/search.png" alt="Lookup" style="width: 16px; height: 16px;" />
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="order-summary p-3 border rounded">
            <h4 class="text-center">Order Summary</h4>
            <p class="text-center order-status @GetOrderStatusClass(Status) mb-4 ">Status: <strong>@Status</strong></p>

            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label">Total Amount</label>
                    <input type="text" class="form-control" readonly @bind="orderSummary.SubTotal" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Total Quantity</label>
                    <input type="text" class="form-control"  readonly @bind="orderSummary.TotalQty" />
                </div>
                <div class="col-12">
                    <label class="form-label">Remark</label>
                    <InputTextArea class="form-control" @bind-Value="orderSummary.Remark" />
                </div>
                @if (usertype == "ADMIN")
                {
                    <div class="col-md-6">
                        <label class="form-label">Discount</label>
                    <input type="number" class="form-control" @bind="orderSummary.DiscDecimal" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Delivery Cost</label>
                    <input type="number" class="form-control" @bind="orderSummary.DeliveryCostDecimal" />
                </div>
                }
                <div class="col-md-6">
                    <label class="form-label">Recipient Address</label>
                    <div class="input-group mb-1">
                        <input type="text" class="form-control" readonly @bind="selectedStore.StoreName" />

                        <button class="btn btn-outline-secondary" @onclick="OpenStoreLookupModal" type="button" title="Cari Store">
                            <img src="images/material/search.png" alt="Lookup" style="width: 16px; height: 16px;" />
                        </button>
                    </div>
                    <input type="text" class="form-control mb-1" readonly @bind="selectedStore.StreetAddress" />
                    <input type="text" class="form-control mb-1" readonly @bind="selectedStore.PhoneNo" />
                </div>
             </div>
        </div>
     
    } 

</div>
@if (isLoading)
{
    <ProgressCart LoadingImageUrl="images/material/cart_add_gif.gif" />
}

@if (showSearchProductModal)
{
    <VDBWebApp.Pages.Transaction.Order.Order_Component.Search_order 
                                                                    OnModalClosed="CloseLookupModal" 
                                                                    OnCartClicked="HandleSelectedCart"/>
}

@if (openAddressModal)
{
    <AddressLookupModal OnAddressSelected="HandleAddressSelected"
                        OnModalClosed="CloseAddressLookupModal"
                        AddressCodeSeq="@orderSummary.RecAddressCode"
                        AddressAlamat="@orderSummary.RecStreetAddress" />
    
}
@if (openCourierModal)
{
    <div class="modal fade show" tabindex=" -1" role="dialog" style="display:block;">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content p-4">
                <div class="modal-header">
                    <h5 class="modal-title">Search</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseCourierModal"></button>
                </div>

                <div class="table-container mt-2">
                    <div class="table-header-actions">
                    </div>
                    <table class="table table-striped table-bordered table-hover person-table">
                        <thead class="table-header">
                            <tr>
                                <th>No</th>
                                <th>Name</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Gensets != null && Gensets.Any())
                            {
                                int seq = 1;
                                @foreach (var store in Gensets)
                                {

                                    <tr>
                                        <td>@seq</td>
                                        <td>@store.Gname</td>
                                        <td>
                                            <div class="d-flex mb-2" style="gap: 10px;">
                                                <button class="btn btn-secondary" @onclick="() => SetCourier(store)">Choose</button>
                                            </div>
                                        </td>
                                    </tr>
                                    seq++;
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7" class="text-center">Data tidak tersedia</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseStoreModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}
   

@if (openStoreModal)
{
    <div class="modal fade show" tabindex=" -1" role="dialog" style="display:block;">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content p-4">
                <div class="modal-header">
                    <h5 class="modal-title">Search</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseStoreModal"></button>
                </div>

                <div class="table-container mt-2">
                    <div class="table-header-actions">
                    </div>
                    <table class="table table-striped table-bordered table-hover person-table">
                        <thead class="table-header">
                            <tr>
                                <th>No</th>
                                <th>Store Name</th>
                                <th>Store Address</th>
                                <th>Phone No</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (customersstore != null && customersstore.Any())
                            {
                                int seq = 1;
                                @foreach (var store in customersstore)
                                {

                                    <tr>
                                        <td>@seq</td>
                                        <td>@store.StoreName</td>
                                        <td>@store.StreetAddress</td>
                                        <td>@store.PhoneNo</td>
                                        <td>
                                            <div class="d-flex mb-2" style="gap: 10px;">
                                                <button class="btn btn-secondary" @onclick="() => SetStore(store)">Choose</button>
                                            </div>
                                        </td>
                                    </tr>
                                    seq++;
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7" class="text-center">Data tidak tersedia</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseStoreModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}


@if (showEditQty)
{

  <div class="modal fade show" tabindex=" -1" role="dialog" style="display:block;">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseEditQtyModal"></button>
            </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="Quantity" class="form-label">Quantity</label>
                        <InputNumber id="Quantity" class="form-control" @bind-Value="selectedOrderListCustomer.QtyNum" />
                    </div>
                    <div class="mb-3">
                        <label for="Remark" class="form-label mt-2">Remark</label>
                        <InputTextArea id="Remark" class="form-control" @bind-Value="selectedOrderListCustomer.Remark" />
                        <button type="button" class="btn btn-success mt-5" data-bs-dismiss="modal" @onclick="SaveEditQty">Save</button>
                    </div>
                    <hr/>
                    @if (usertype == "ADMIN")
                    {
                        <div class="mb-3">
                            <label for="DiscPercent" class="form-label">Discount By Percentage (%)</label>
                            <InputNumber id="DiscPercent" class="form-control" @bind-Value="discPercent" />
                            <button type="button" class="btn btn-success mt-5" data-bs-dismiss="modal" @onclick="SaveEditDiscPercent">Save Percentage</button>
                        </div>
                        <hr />
                        <div class="mb-3">
                            <label for="DiscAmount" class="form-label">Discount By Amount</label>
                            <InputNumber id="DiscAmount" class="form-control" @bind-Value="discAmount" />
                            <button type="button" class="btn btn-success mt-5" data-bs-dismiss="modal" @onclick="SaveEditDiscAmount">Save Amount</button>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseEditQtyModal">Cancel</button>
                </div>
         </div>
     </div>
  </div>
}

<ActionModal @ref="SaveConfirmationModal" />
<WarningModal @ref="warningModal" />

@if (isLoadingMenu)
{
    <ProgressCircle LoadingImageUrl="images/logoVDB.png" />
}
@code {

    private string msgCheckout = "Are you sure to check out?";
    private string msgConfirm = "Are you sure to confirm this order?";
    private string msgCancel = "Are you sure to cancel this order?";
    private string msgClosed = "Are you sure to close this order?";
    private string msgPayment = "Are you sure to confirm this payment?";
    private string msgCart = "Are you sure you want to retrieve all items from the cart?";

    private Order orderSummary = new();

    private OrderListCustomers selectedOrderListCustomer = new OrderListCustomers();
    private List<CustomerStore> customersstore = new();
    private CustomerStore selectedStore = new();
    private ActionModal? SaveConfirmationModal;
    private WarningModal warningModal;
    private List<Genset> Gensets = new List<Genset>();
    private Genset selectedGenset = new();
    private string gtypepar = "02";
    private string Status = "NEW";

    private bool loading = false;
    private bool isLoading = false;

    private bool isLoadingMenu = false;
    private bool showSearchProductModal = false;
    private bool showEditQty=false;
    private bool openStoreModal = false;
    private bool openAddressModal =false;
    private bool openCourierModal = false;
    private string customerpersonid = "";
    private string userid = "";
    private string personid = "";
    private string itemIdCartToRemove = "";
    private string orderid = "";
    private decimal discPercent = 0;
    private decimal discAmount = 0;
    private string? usertype = "";
    private int qtyPrev = 0;
    private List <OrderListCustomers> orderListCustomers = new List<OrderListCustomers>();
    private OrderCustomer customer = new OrderCustomer();
    private Response response = new Response();

    private int TotalQty => orderListCustomers.Sum(x => x.QtyNum);

    protected override async Task OnInitializedAsync()
    {
        isLoadingMenu = true;
        customerpersonid = await LocalStorage.GetItemAsync<string>("selectedOrderCustomerId");
        userid = await LocalStorage.GetItemAsync<string>("userid") ?? "";
        orderid = await LocalStorage.GetItemAsync<string>("OrderId") ?? "";
        usertype = await LocalStorage.GetItemAsync<string>("usertype") ?? "";
        personid = await LocalStorage.GetItemAsync<string>("personid") ?? "";

        await FetchData();
        isLoadingMenu = false;
    }

    private async Task FetchData()
    {
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        var data = await OrderService.GetListOrder(customerpersonid);
        var user = await LocalStorage.GetItemAsync<string>("customerData");
        var datastore = await CustomerService.GetCustomerStore(customerpersonid);
        var datacourier = await GensetService.GetGenset(gtypepar, "0", "1", "");


        if (!string.IsNullOrEmpty(data))
        {
            orderListCustomers = JsonSerializer.Deserialize<List<OrderListCustomers>>(data, options) ?? new List<OrderListCustomers>();

        }
        if (!string.IsNullOrEmpty(user))
        {
            customer = JsonSerializer.Deserialize<OrderCustomer>(user, options) ?? new OrderCustomer();
        }
        if (!string.IsNullOrEmpty(datastore))
        {
            customersstore = JsonSerializer.Deserialize<List<CustomerStore>>(datastore, options);
            selectedStore = customersstore.FirstOrDefault();
            orderSummary.SenderStoreId = selectedStore.StoreId;
        }

        if (!string.IsNullOrEmpty(datacourier))
        {
            Gensets = JsonSerializer.Deserialize<List<Genset>>(datacourier, options);
        }


        orderSummary.SubTotal = orderListCustomers.Sum(x => x.SubTotalAmount).ToString("N2");
        orderSummary.TotalQty = orderListCustomers.Sum(x => x.QtyNum).ToString();

    }

    private async Task CloseLookupModal()
    {
        await FetchData();
        showSearchProductModal = false;
    }

    private async Task SaveEditQty()
    {
        //var data = OrderService.SetQtyCart(customerpersonid, selectedOrderListCustomer.Item_Id, selectedOrderListCustomer.Qty);

        var data = await OrderService.SetQtyCart(customerpersonid, selectedOrderListCustomer.Item_Id, selectedOrderListCustomer.Qty,selectedOrderListCustomer.Remark);
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        if (!string.IsNullOrEmpty(data))
        {
            response = JsonSerializer.Deserialize<List<Response>>(data, options).FirstOrDefault() ?? new Response();

            if (response.StatusCode == "200")
            {
                isLoadingMenu = true;
                isLoadingMenu = false;
                SaveConfirmationModal?.Show("Data successfully saved", "bi bi-check-circle", 0, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
                // Tampilkan pesan sukses
                
                showEditQty = false;
            }
            else
            {
                isLoadingMenu = true;
                isLoadingMenu = false;
                SaveConfirmationModal?.Show(response.Msg, "bi bi-exclamation-triangle", 1, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
                // Tampilkan pesan error
                selectedOrderListCustomer.QtyNum = qtyPrev;
               
            }
        }

    }

    private async Task SaveEditDiscPercent()
    {
        //var data = OrderService.SetQtyCart(customerpersonid, selectedOrderListCustomer.Item_Id, selectedOrderListCustomer.Qty);

        var data = await OrderService.SetDiscPercentageCart(customerpersonid, selectedOrderListCustomer.Item_Id, discPercent.ToString("F2"));
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        if (!string.IsNullOrEmpty(data))
        {
            response = JsonSerializer.Deserialize<List<Response>>(data, options).FirstOrDefault() ?? new Response();

            if (response.StatusCode == "200")
            {
                isLoadingMenu = true;
                isLoadingMenu = false;
                SaveConfirmationModal?.Show("Data successfully saved", "bi bi-check-circle", 0, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
                // Tampilkan pesan sukses
               
                discPercent = 0;
                showEditQty = false;
            }
            else
            {
                isLoadingMenu = true;
                isLoadingMenu = false;
                SaveConfirmationModal?.Show(response.Msg, "bi bi-exclamation-triangle", 1, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
                // Tampilkan pesan error
                selectedOrderListCustomer.QtyNum = qtyPrev;
                
            }
        }

    }

    private async Task SaveEditDiscAmount()
    {
        //var data = OrderService.SetQtyCart(customerpersonid, selectedOrderListCustomer.Item_Id, selectedOrderListCustomer.Qty);

        var data = await OrderService.SetDiscAmountCart(customerpersonid, selectedOrderListCustomer.Item_Id, discAmount.ToString("F2"));
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        if (!string.IsNullOrEmpty(data))
        {
            response = JsonSerializer.Deserialize<List<Response>>(data, options).FirstOrDefault() ?? new Response();

            if (response.StatusCode == "200")
            {
                isLoadingMenu = true;
                isLoadingMenu = false;
                SaveConfirmationModal?.Show("Data successfully saved", "bi bi-check-circle", 0, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
                // Tampilkan pesan sukses
                
                discAmount = 0;
                showEditQty = false;
            }
            else
            {
                isLoadingMenu = true;
                isLoadingMenu = false;
                SaveConfirmationModal?.Show(response.Msg, "bi bi-exclamation-triangle", 1, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
                // Tampilkan pesan error
                selectedOrderListCustomer.QtyNum = qtyPrev;
                
            }
        }
    }

    private async Task SuccessConfirmation()
    {
        await FetchData();
    }

    private void SuccessConfirmationCheckout()
    {
        if (customer.PersonCategory == "DSM")
        {
            Navigation.NavigateTo("/productetalase");
        }
        else
        {
            Navigation.NavigateTo("/home");
        }
    }

    private async Task HandleConfirmationDelete(OrderListCustomers orderListCustomer)
    {
        ShowSaveConfirmation(
    EventCallback.Factory.Create(this, async () => await HandleRemoveItemCart(orderListCustomer)),
    "Are you sure you want to remove this item?");
    }

    private async Task HandleRemoveItemCart(OrderListCustomers orderListCustomer)
    {
        var data = await OrderService.DeleteItemFromCart(customerpersonid, orderListCustomer.Item_Id);
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        if (!string.IsNullOrEmpty(data))
        {
            response = JsonSerializer.Deserialize<List<Response>>(data, options).FirstOrDefault() ?? new Response();

            if (response.StatusCode == "200")
            {
                isLoadingMenu = true;
                isLoadingMenu = false;
                SaveConfirmationModal?.Show("Success, Data has been removed from List", "bi bi-check-circle", 0, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
                // Tampilkan pesan sukses
                
            }
            else
            {
                isLoadingMenu = true;
                isLoadingMenu = false;
                SaveConfirmationModal?.Show(response.Msg, "bi bi-exclamation-triangle", 1, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
                // Tampilkan pesan error
                selectedOrderListCustomer.QtyNum = qtyPrev;
                
            }
        }
        await FetchData();
    }


    private void HandleIncreaseQtyItem(OrderListCustomers orderListCustomer)
    {
        
    }

    private void HandleClicked(OrderListCustomers orderListCustomer)
    {
        selectedOrderListCustomer = orderListCustomer;
        qtyPrev = orderListCustomer.QtyNum;
        showEditQty = true;
        
    }


    private async Task CloseEditQtyModal()
    {
        showEditQty = false;
        Navigation.NavigateTo(Navigation.Uri);
        await FetchData();
        StateHasChanged();
    }


    private async Task HandleSelectedCart(Product prd)
    {
        var data = await OrderService.AddItemToCart(customerpersonid, prd.item_id);
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        if (!string.IsNullOrEmpty(data))
        {
            response = JsonSerializer.Deserialize<List<Response>>(data, options).FirstOrDefault() ?? new Response();

            if (response.StatusCode == "200")
            {
                isLoadingMenu = true;
                isLoadingMenu = false;
                SaveConfirmationModal?.Show("Success inserted to List", "bi bi-check-circle", 0, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
                // Tampilkan pesan sukses
                
            }
            else
            {
                isLoadingMenu = true;
                isLoadingMenu = false;
                SaveConfirmationModal?.Show(response.Msg, "bi bi-exclamation-triangle", 1, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
                // Tampilkan pesan error
                selectedOrderListCustomer.QtyNum = qtyPrev;
                
            }
        }
        await FetchData();
    }

    private void HandleAddressSelected(Address selectedAddress)
    {
        orderSummary.RecAddressCode = selectedAddress.AddressCode;
        orderSummary.RecStreetAddress = selectedAddress.AlamatLengkap;

        openAddressModal = false;
        StateHasChanged();
    }

    private void CloseAddressLookupModal()
    {
        openAddressModal = false;
    }

    private void OnSearchClik()
    {
        showSearchProductModal = true;
    }

    private async Task OnChekOutClick()
    {

        if (customer.PersonCategory == "DSM")
        {
            orderSummary.SenderAddressCode = selectedStore.AddressCode;
            orderSummary.SenderStoreId = selectedStore.StoreId;
            orderSummary.SenderName = selectedStore.StoreName;
            orderSummary.SenderStreetAddress = selectedStore.StreetAddress;
            orderSummary.SenderPhoneNo = selectedStore.PhoneNo;
        }
        else
        {
            orderSummary.RecAddressCode = selectedStore.AddressCode;
            orderSummary.RecStoreId = selectedStore.StoreId;
            orderSummary.RecName = selectedStore.StoreName;
            orderSummary.RecStreetAddress = selectedStore.StreetAddress;
            orderSummary.RecPhoneNo = selectedStore.PhoneNo;
        }

        orderSummary.ItemList = "";
        orderSummary.CourierCode = selectedGenset.GCode;


        foreach (var prod in orderListCustomers)
        {
            orderSummary.ItemList = orderSummary.ItemList +
                                    prod.Item_Id + ";" + prod.PriceNum.ToString() + ";" +
                                    prod.DiscAmount.ToString("F2") + ";" + prod.QtyNum.ToString("F0") + ";*";
        }

        

        var data = await OrderService.SetOrderInsertSO(customerpersonid,userid, orderSummary);
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

        if (!string.IsNullOrEmpty(data))
        {
            response = JsonSerializer.Deserialize<List<Response>>(data, options).FirstOrDefault() ?? new Response();

            if (response.StatusCode == "200")
            {
                isLoadingMenu = true;
                isLoadingMenu = false;
                SaveConfirmationModal?.Show($"Success, order created with number : {response.DocNo}", "bi bi-check-circle", 0, EventCallback.Factory.Create(this, SuccessConfirmationCheckout), "Ok", false);
                // Tampilkan pesan sukses
                
            }
            else
            {
                isLoadingMenu = true;
                isLoadingMenu = false;
                SaveConfirmationModal?.Show(response.Msg, "bi bi-exclamation-triangle", 1, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
                // Tampilkan pesan error
                selectedOrderListCustomer.QtyNum = qtyPrev;
                
            }
        }

        
        @*Console.WriteLine(userid);
        Console.WriteLine(customerpersonid);
        Console.WriteLine(string.Join(", ", orderSummary.GetType()
     .GetProperties()
     .Select(p => $"{p.Name}: {p.GetValue(orderSummary)}")));*@

    }

    private async Task GetItemFromCart()
    {
        var data = await UserService.SetUserCartToOrder(personid);
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

        if (!string.IsNullOrEmpty(data))
        {
            response = JsonSerializer.Deserialize<List<Response>>(data, options).FirstOrDefault() ?? new Response();

            if (response.StatusCode == "200")
            {
                isLoadingMenu = true;
                await Task.Delay(1000);
                isLoadingMenu = false;
                SaveConfirmationModal?.Show("Items have been successfully retrieved from the cart.", "bi bi-check-circle", 0, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
                // Tampilkan pesan sukses
                
            }
            else
            {
                isLoadingMenu = true;
                isLoadingMenu = false;
                SaveConfirmationModal?.Show(response.Msg, "bi bi-exclamation-triangle", 1, EventCallback.Factory.Create(this, SuccessConfirmation), "Ok", false);
                // Tampilkan pesan error
                
            }
        }

    }

  @*  private void AddToCart(Product product)
    {
        selectedProducts.Add(product);
    }

    private void AddToWishlist(Product product)
    {
        wishlist.Add(product);
    }*@

    private void CloseStoreModal()
    {
        openStoreModal = false;
    }

    private void CloseCourierModal()
    {
        openCourierModal = false;

    }

    private void OpenStoreLookupModal()
    {
        openStoreModal = true;    
    }

    private void OpenCourierLookupModal()
    {
        openCourierModal = true; 
    }

    private void OpenAddressLookupModal()
    {
        openAddressModal = true;
    }

    private async Task SetStore(CustomerStore store)
    {
        selectedStore = store;
        openStoreModal = false;
    }

    private async Task SetCourier(Genset genset)
    {
        selectedGenset = genset;
        openCourierModal = false;
    }

    private async Task ShowSaveConfirmation(EventCallback confirmAction, string? msg = null,string? msgYes=null,string? msgNo =null )
    {
        var message = string.IsNullOrWhiteSpace(msg)
            ? "Apakah Anda yakin ingin Menyimpan?"
            : msg;
        var messageYes = string.IsNullOrWhiteSpace(msgYes)
            ? "Yes"
            : msgYes;
        var messageNo = string.IsNullOrWhiteSpace(msgNo)
        ? "No"
        : msgNo;

        SaveConfirmationModal?.Show(
            message,                     // gunakan msg atau default
            "oi oi-warning",             // icon
            2,                           // level
            confirmAction,               // EventCallback dinamis
            messageYes,                  // confirm button label
            true,                        // show cancel
            messageNo                     // cancel button label
        );
    }

    private string GetOrderStatusClass(string status)
    {
        return status?.ToUpper() switch
        {
            "NEW" => "order-status",
            "PAYMENT" => "order-status-payment",
            "PROCESS" => "order-status-process",
            "CANCELED" => "order-status-canceled",
            "CLOSED" => "order-status-closed",
            _ => "order-status-default", // Class default jika status tidak dikenali
        };
    }

    private void Checkout()
    {
        // Implementasi checkout bisa berupa pengiriman data ke API atau proses lainnya
       
    }

  
}

<style>
    .order-status {
        background-color: var(--status-baru); /* Green for "Baru" */
        color: var(--warm-white);
        padding: 5px 8px;
        border-radius: 5px;
        font-size: 0.8rem;
    }

    .order-status-payment {
        background-color: var(--dark-brown); /* Green for "Baru" */
        color: var(--warm-white);
        padding: 5px 8px;
        border-radius: 5px;
        font-size: 0.8rem;
    }

    .order-status-process {
        background-color: var(--light-brown); /* Green for "Baru" */
        color: var(--dark-brown);
        padding: 5px 8px;
        border-radius: 5px;
        font-size: 0.8rem;
    }

    .order-status-default {
        background-color: #f0f0f0; /* Contoh background default */
        color: #333; /* Contoh warna teks default */
        padding: 5px 8px;
        border-radius: 5px;
        font-size: 0.8rem;
    }

</style>